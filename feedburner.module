<?php
// $Id$

/**
 * @file
 * Integrates with FeedBurner services, primarily feed redirection.
 */

/**
 * Implementation of hook_help().
 */
function feedburner_help($path, $arg) {
  switch ($path) {
    case 'admin/help#feedburner':
      // Return a line-break version of the module README
      //$output = filter_filter('process', 1, NULL, file_get_contents(dirname(__FILE__) . '/README.txt'));
      $output .= _feedburner_blurb();
      return $output;
    case 'admin/settings/feedburner':
      //$errors = feedburner_requirements('runtime');
      //foreach ($errors as $error) {
      //  drupal_set_message($error['description'], 'error');
      //}
      $output = '<p>' . t('These are the settings for the FeedBurner module. Once you have everything set, check out your site\'s <a href="@link">FeedBurner feeds</a>.', array('@link' => url('admin/build/feedburner'))) . '</p>';
      return $output;
    case 'admin/build/feedburner':
      $output = '<p>' . t('This is the FeedBurner site feed redirection building page. Make sure to check out the <a href="@link">FeedBurner settings</a>.', array('@link' => url('admin/settings/feedburner'))) . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_requirements().
 */
function feedburner_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    if (!_feedburner_can_api()) {
      $requirements['feedburner_simplexml'] = array(
        'title' => t('FeedBurner module'),
        'value' => t('SimpleXML not enabled'),
        'severity' => REQUIREMENT_WARNING,
        'description' => t('Some FeedBurner features require the SimpleXML PHP extension (not available for PHP4).'),
      );
    }
    //elseif (!_feedburner_can_api(TRUE)) {
    //  $requirements['feedburner_auth'] = array(
    //    'title' => t('FeedBurner account'),
    //    'value' => t('FeedBurner account not verified'),
    //    'severity' => REQUIREMENT_WARNING,
    //    'description' => t('Your FeedBurner account has not been verified.'),
    //  );
    //}
  }
  return $requirements;
}

/**
 * Implementation of hook_perm().
 */
function feedburner_perm() {
  return array('administer FeedBurner', 'view FeedFlare');
}

/**
 * Implementation of hook_menu().
 */
function feedburner_menu() {
  $items['admin/build/feedburner'] = array(
    'title' => 'FeedBurner',
    'description' => 'Change site feed redirections to FeedBurner.',
    'page callback' => 'feedburner_build_overview',
    'page arguments' => array('site'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['admin/build/feedburner/list'] = array(
    'title' => 'Feeds',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  foreach (_feedburner_get_feed_categories() as $key => $options) {
    if (!isset($option['module']) || module_exists($options['module'])) {
      $items['admin/build/feedburner/list/' . $key] = array(
        'title' => ucfirst($key),
        'type' => isset($options['default']) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'weight' => isset($options['default']) ? -10 : 0,
        'page callback' => 'feedburner_build_overview',
        'page arguments' => array($key),
        'access arguments' => array('administer FeedBurner'),
        'file' => 'feedburner.admin.inc',
      );
    }
  }
  $items['admin/build/feedburner/burn'] = array(
    'title' => 'Burn feed',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedburner_burn_form'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['admin/build/feedburner/unburn'] = array(
    'title' => 'Unburn feed',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedburner_unburn_form'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['admin/settings/feedburner'] = array(
    'title' => 'FeedBurner',
    'description' => 'Administer FeedBurner integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedburner_settings_form'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['feedburner/autocomplete'] = array(
    'page callback' => 'feedburner_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  //$items['feedburner/verify'] = array(
  //  'page callback' => '_feedburner_verify',
  //  'type' => MENU_CALLBACK,
  //  'access arguments' => array('administer FeedBurner'),
  //  'file' => 'feedburner.admin.inc',
  //);
  return $items;
}

/**
 * Implementation of hook_boot().
 */
function feedburner_boot() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
  $path = _feedburner_get_path();
  _feedburner_check_redirect($path);
}

/**
 * Implementation of hook_nodeapi().
 *
 * Inserts FeedFlare into nodes.
 */
function feedburner_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($op == 'view' && $node->build_mode != NODE_BUILD_PREVIEW && user_access('view FeedFlare')) {
    $feedburner_display = variable_get('feedburner_feedflare_display', array('page'));
    if (($teaser && in_array('teaser', $feedburner_display)) || ($page && in_array('page', $feedburner_display))) {
      $feedflare = _feedburner_get_feedflare($node->nid, $node->type);
      if ($feedflare) {
        $node->content['feedflare'] = array(
          '#value' => $feedflare,
          '#weight' => 10,
        );
      }
    }
  }
}

/**
 * Implementation of hook_user().
 *
 * Displays, validates and saves an option to redirect a user's blog feed.
 */
function feedburner_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form' && $category == 'account' && user_access('create blog entries') && variable_get('feedburner_blogs', 0)) {
    $user_blog_url = 'blog/' . $account->uid . '/feed';
    $form['feedburner'] = array(
      '#type' => 'fieldset',
      '#title' => t('Your Blog\'s FeedBurner Settings'),
      '#weight' => 1,
      '#collapsible' => TRUE,
      '#description' => t('Requests for your blog\'s feed (<a href="@url">@url</a>) will be redirected to the FeedBurner feed below. Leave this blank to disable redirection.', array('@url' => url($user_blog_url, array('absolute' => TRUE)))),
    );
    $form['feedburner']['feedburner_user_blog'] = array(
      '#type' => 'textfield',
      '#maxlength' => 100,
      '#size' => 30,
      '#default_value' => db_result(db_query("SELECT feedburner FROM {feedburner} WHERE path = '%s'", $user_blog_url)),
      '#field_prefix' => _feedburner_construct_url(),
      '#description' => t('This field is case-sensitive and alphanumeric.'),
    );
    return $form;
  }
  elseif ($op == 'validate' && isset($edit['feedburner_user_blog'])) {
    if (preg_match('/[^\w-]/', $edit['feedburner_user_blog'])) {
      form_set_error('feedburner_user_blog', 'Invalid FeedBurner feed name');
    }
  }
  elseif ($op == 'update' && isset($edit['feedburner_user_blog'])) {
    require_once drupal_get_path('module', 'feedburner') . '/feedburner.admin.inc';
    $user_blog_url = 'blog/' . $account->uid . '/feed';
    _feedburner_save_feed($user_blog_url, $edit['feedburner_user_blog']);
    $edit['feedburner_user_blog'] = NULL;
  }
  elseif ($op == 'delete') {
    require_once drupal_get_path('module', 'feedburner') . '/feedburner.admin.inc';
    $user_blog_url = 'blog/' . $account->uid . '/feed';
    _feedburner_save_feed($user_blog_url);
  }
}

/**
 * Implementation of hook_block().
 */
function feedburner_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('FeedBurner FeedFlare'),
        'cache' => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE,
      );
      return $blocks;
    case 'configure':
      break;
    case 'save':
      break;
    case 'view':
      switch ($delta) {
        case 0:
          if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {
            $node = node_load(arg(1));
            $feedflare = _feedburner_get_feedflare($node->nid, $node->type);
            if ($feedflare) {
              $block = array(
                'subject' => t('FeedFlare'),
                'content' => $feedflare,
              );
            }
          }
          break;
      }
      return $block;
  }
}


/**
 * Check to see if the current path has a FeedBurner feed redirect, and perform
 * the redirection as necessary.
 *
 * @param $path
 *   The current request path.
 */
function _feedburner_check_redirect($path) {
  // Don't waste time and database hits on certain paths (admin paths, frontpage)
  if (drupal_is_front_page() || preg_match('/^admin\//i', $path)) {
    return;
  }

  $skip_redirect = (isset($_GET['redirect']) && $_GET['redirect'] == 'no');
  $useragents_regex = variable_get('feedburner_useragents', '/feedburner|feedvalidator/i');

  if (!$skip_redirect
      && !preg_match($useragents_regex, $_SERVER['HTTP_USER_AGENT'])
      && $feedburner = db_result(db_query("SELECT feedburner FROM {feedburner} WHERE path = '%s'", $path))) {
    $url = _feedburner_construct_url($feedburner);
    $status = variable_get('feedburner_redirect_status', 307);

    // Need to make a condensed copy of drupal_goto since common.inc is not yet
    // loaded (it will be if we hit DRUPAL_BOOTSTRAP_FULL). We can skip lots of
    // unneeded includes and processing since we are now going to redirect the
    // user and not continue any more Drupal loading.
    module_invoke_all('exit', $url);
    session_write_close();
    header('Location: ' . $url, TRUE, (int) $status);
    exit();
  }
}

/**
 * Constructs an absolute url based on a FeedBurner feed URI.
 *
 * @param $uri
 *   The FeedBurner feed URI.
 * @return
 *   The full URL of the FeedBurner feed.
 */
function _feedburner_construct_url($uri = '') {
  return 'http://' . variable_get('feedburner_domain', 'feeds.feedburner.com') . '/' . $uri;
}

/**
 * Determines if we can use the FeedBurner API and if desired, loads the API
 * functions.
 */
function _feedburner_can_api($valid_account = FALSE) {
  return extension_loaded('SimpleXML') && function_exists('simplexml_load_string') && (!$valid_account || variable_get('feedburner_auth', NULL));
}

//function _feedburner_request_api() {
//  // drupal_query_string_encode
//}

/*
 * Extract part of the current Drupal path from a certain 'argument' onward.
 *
 * For example, if the path is 'http://example-drupal/blah/foo/foobar/ferzle':
 *   $pos = 0, returns 'blah/foo/foobar/ferzle'
 *   $pos = 2, returns 'foobar/ferzle'
 *   $pos = 4, returns ''
 *
 * @param $pos
 *   The argument of the path to start at, use 0 to get the whole path
 * @return
 *   The extracted part of the path
 */
function _feedburner_get_path($pos = 0) {
  $path = str_replace(' ', '+', $_GET['q']);
  if ($pos > 0) {
    $path = explode('/', $path, $pos);
    $path = (count($path) >= $pos ? end($path) : '');
  }
  return $path;
}

/**
 * Returns a list of feed categories.
 */
function _feedburner_get_feed_categories() {
  return array(
    'site' => array('default' => TRUE),
    'blogs' => array('module' => 'blog'),
    'taxonomy' => array('module' => 'taxonomy'),
  );
}

/**
 * Gets the script for feedflare based on node id and node type.
 *
 * @param $nid
 *   The node id.
 * @param $node_types
 *   The node's type (story, blog, etc.).
 * @return
 *   A JavaScript code for FeedFlare.
 */
function _feedburner_get_feedflare($nid, $node_type) {
  $feedflare = '';
  $feedflare_feed = variable_get('feedburner_feedflare_feed', 0);
  $node_types = variable_get('feedburner_feedflare_node_types', array());
  if ($feedflare_feed && in_array($node_type, $node_types)) {
    $node_url = url('node/' . $nid, array('absolute' => TRUE));
    $feedflare = '<p>FEEDFLARE!</p><script src="http://feeds.feedburner.com/~s/' . $feedflare_feed . '?i=' . $node_url . '" type="text/javascript" charset="utf-8"></script>';
  }
  return $feedflare;
}

/**
 * Bleh.
 */
function _feedburner_blurb() {
  return '<p style="text-align: center; font-size: smaller;">' . t('This module was developed by <a href="@link-dave">Dave Reid</a> with assistance from <a href="@link-feedburner">FeedBurner</a>.<br />Please consider <a href="@link-review">reviewing this module on drupalmodules.com</a> or <a href="@link-donate">donating to the developer\'s replacement laptop fund</a>.', array('@link-dave' => 'http://davereid.net/', '@link-feedburner' => 'http://www.feedburner.com/', '@link-review' => 'http://drupalmodules.com/module/feedburner', '@link-donate' => 'http://davereid.net/content/laptop-fund')) . '</p>';
}
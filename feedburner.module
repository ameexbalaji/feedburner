<?php
// $Id$

/**
 * @file
 * Integrates with FeedBurner services, primarily feed redirection.
 */

/**
 * Implementation of hook_help().
 */
function feedburner_help($path, $arg) {
  switch ($path) {
    case 'admin/help#feedburner':
      $output = '';
      return $output;
    case 'admin/settings/feedburner':
      $output = '<p>'. t('These are the settings for the FeedBurner module. Once you have everything set, check out your site\'s <a href="@link">FeedBurner feeds</a>.', array('@link' => url('admin/build/feedburner'))) .'</p>';
      return $output;
    case 'admin/build/feedburner':
      $output = '<p>'. t('This is the FeedBurner site feed redirection building page. Make sure to check out the <a href="@link">FeedBurner settings</a>.', array('@link' => url('admin/settings/feedburner'))) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function feedburner_perm() {
  return array('administer FeedBurner', 'view FeedFlare', 'add FeedBurner feed to own blog');
}

/**
 * Implementation of hook_menu().
 */
function feedburner_menu() {
  $items['admin/build/feedburner'] = array(
    'title' => 'FeedBurner',
    'description' => 'Change site feed redirections to FeedBurner.',
    'page callback' => 'feedburner_build_overview',
    'page arguments' => array('site'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['admin/build/feedburner/list'] = array(
    'title' => 'Feeds',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  foreach (_feedburner_get_feed_categories() as $category => $options) {
    if (!isset($option['module']) || module_exists($options['module'])) {
      $items['admin/build/feedburner/list/'. $category] = array(
        'title' => drupal_ucfirst($category),
        'type' => isset($options['default']) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'weight' => isset($options['default']) ? -10 : 0,
        'page callback' => 'feedburner_build_overview',
        'page arguments' => array($category),
        'access arguments' => array('administer FeedBurner'),
        'file' => 'feedburner.admin.inc',
      );
    }
  }
  $items['admin/build/feedburner/burn'] = array(
    'title' => 'Burn feed',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedburner_burn_form'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['admin/build/feedburner/unburn'] = array(
    'title' => 'Unburn feed',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedburner_unburn_form'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['admin/settings/feedburner'] = array(
    'title' => 'FeedBurner',
    'description' => 'Administer FeedBurner integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedburner_settings_form'),
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['admin/build/feedburner/autocomplete'] = array(
    'page callback' => 'feedburner_admin_build_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer FeedBurner'),
    'file' => 'feedburner.admin.inc',
  );
  $items['feedburner/feedflare'] = array(
    'page callback' => 'feedburner_feedflare',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file' => 'feedburner.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_boot().
 */
function feedburner_boot() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
  $path = _feedburner_get_path();
  _feedburner_check_redirect($path);
}

/**
 * Implementation of hook_init(). 
 */
function feedburner_init() {
  if (feedburner_var('replace_html')) {
    // Start another output buffer so we can catch it in feedburner_exit().
    ob_start();
  }
}

/**
 * Implementation of hook_exit().
 */
function feedburner_exit() {
  // Replace any links to original feed URLs with their FeedBurner equivalents.
  if (feedburner_var('replace_html') && ob_get_level()) {
    // Get the current output and clean the output buffer.
    $data = ob_get_contents();
    ob_end_clean();

    // Perform URL replacements.
    $changed = FALSE;
    $query = db_query("SELECT path, feedburner FROM {feedburner} ORDER BY path DESC");
    while ($feed = db_fetch_object($query)) {
      $internal_url = url($feed->path);
      $external_url = url($feed->path, array('absolute' => TRUE));
      $regex = '%(href=")'. preg_quote($internal_url, '/') .'(")|'. preg_quote($external_url, '/') .'%i';
      $replace = '$1'. _feedburner_construct_url($feed->feedburner) . '$2';
      $count = 0;
      $data = preg_replace($regex, $replace, $data, -1, $count);
      if ($count) {
        $changed = TRUE;
      }
    }
    
    // If the page has been changed and caching is enabled, start a new output
    // buffer and save the new version to the cache. If nothing has changed,
    // simply output the page content.
    if ($changed && variable_get('cache', CACHE_DISABLED) != CACHE_DISABLED && page_get_cache(TRUE)) {
      ob_start();
      echo $data;
      page_set_cache();
    }
    else {
      echo $data;
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * Inserts FeedFlare into nodes.
 */
function feedburner_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($op == 'view' && $node->build_mode != NODE_BUILD_PREVIEW && user_access('view FeedFlare')) {
    $display = $teaser ? 'teaser' : ($page ? 'page' : NULL);
    //$display = array('teaser' => $teser, 'page' => $page);
    $feedflare_display = feedburner_var('feedflare_display');
    if (in_array($display, $feedflare_display) && $feedflare = _feedburner_get_feedflare_script($node)) {
      $node->content['feedflare'] = array(
        '#value' => $feedflare,
        '#weight' => 10,
      );
    }
  }
}

/**
 * Implementation of hook_user().
 *
 * Displays, validates and saves an option to redirect a user's blog feed.
 */
function feedburner_user($type, &$edit, &$account, $category = NULL) {
  if ($type == 'update' && isset($edit['feedburner_feedburner'])) {
    _feedburner_save_feed($edit['feedburner_path'], $edit['feedburner_feedburner']);
    $edit['feedburner_path'] = NULL;
    $edit['feeedburner_feedburner'] = NULL;
  }
  elseif ($type == 'delete') {
    _feedburner_save_feed("blog/{$account->uid}/feed");
  }
}

/**
 * Validates a FeedBurner feed name.
 */
function _feedburner_validate_feed($element, &$form_state) {
  if (preg_match('%[^\w-/]%', $element['#value'])) {
    form_set_error($element['#name'], t('Invalid FeedBurner feed name.'));
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function feedburner_form_user_profile_form_alter(&$form, $form_state) {
  if ($form['_category']['#value'] == 'account') {
    $account = $form['_account']['#value'];
    if (user_access('create blog entries', $account) && user_access('add FeedBurner feed to own blog', $account)) {
      $user_blog_feed = "blog/{$account->uid}/feed";
      if (!isset($form['blog'])) {
        $form['blog'] = array(
          '#type' => 'fieldset',
          '#title' => t('Blog settings'),
          '#weight' => 1,
          '#collapsible' => TRUE,
        );
      }
      $form['blog']['feedburner_path'] = array(
        '#type' => 'value',
        '#value' => $user_blog_feed,
      );
      $form['blog']['feedburner_feedburner'] = array(
        '#type' => 'textfield',
        '#title' => t('FeedBurner feed'),
        '#maxlength' => 100,
        '#size' => 25,
        '#default_value' => db_result(db_query("SELECT feedburner FROM {feedburner} WHERE path = '%s'", $user_blog_feed)),
        '#field_prefix' => _feedburner_construct_url(),
        '#description' => t("Requests for <a href=\"@blog-feed\">your blog's feed</a> will be redirected to the FeedBurner feed specified above. Leave this blank to disable redirection for your blog's feed.", array('@blog-feed' => url($user_blog_feed, array('absolute' => TRUE)))),
        '#element_validate' => array('_feedburner_validate_feed'),
      );
    }
  }
}

/**
 * Implementation of hook_block().
 */
function feedburner_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('FeedBurner FeedFlare');
    $blocks[0]['cache'] = BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE;
    $blocks[1]['info'] = t('FeedBurner E-mail Subscribe');
    $blocks[1]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[2]['info'] = t('FeedBurner FeedCount');
    $blocks[2]['cache'] = BLOCK_CACHE_GLOBAL;
    $blocks[3]['info'] = t('FeedBurner Feeds');
    $blocks[3]['cache'] = BLOCK_CACHE_GLOBAL;
    return $blocks;
  }
  elseif ($op == 'configure' && $delta == 1) {
    module_load_include('inc', 'feedburner', 'feedburner.admin');
    $feeds = array(0 => 'None (disabled)');
    $result = db_query('SELECT DISTINCT feedburner FROM {feedburner} ORDER BY feedburner');
    while ($feed = db_result($result)) {
      $details = _feedburner_get_feed_features($feed);
      if ($details->id) {
        $feeds[$details->id] = $feed;
      }
    }
    $form['feedburner_block_email_id'] = array(
      '#type' => 'select',
      '#title' => t('FeedBurner feed'),
      '#default_value' => feedburner_var('block_email_id'),
      '#options' => $feeds,
      '#description' => t('Only feeds with the email subscription feature verified can be selected.'),
    );
    $form['feedburner_block_email_display'] = array(
      '#type' => 'radios',
      '#title' => t('Display as'),
      '#default_value' => feedburner_var('block_email_display'),
      '#options' => array(t('Text link'), t('Inline form')),
    );
    return $form;
  }
  elseif ($op == 'configure' & $delta == 2) {
    $feeds = array(0 => 'None (disabled)');
    $result = db_query('SELECT DISTINCT feedburner FROM {feedburner} ORDER BY feedburner');
    while ($feed = db_result($result)) {
      $feeds[$feed] = $feed;
    }
    $form['feedburner_block_feedcount_feed'] = array(
      '#type' => 'select',
      '#title' => t('FeedBurner feed'),
      '#default_value' => feedburner_var('block_feedcount_feed'),
      '#options' => $feeds,
    );
    return $form;
  }
  elseif ($op == 'save' && $delta == 1) {
    variable_set('feedburner_block_email_id', (int) $edit['feedburner_block_email_id']);
    variable_set('feedburner_block_email_display', $edit['feedburner_block_email_display']);
  }
  elseif ($op == 'save' && $delta == 2) {
    variable_set('feedburner_block_feedcount_feed', $edit['feedburner_block_feedcount_feed']);
  }
  elseif ($op == 'view') {
    //module_load_include('inc', 'feedburner', 'feedburner.pages');
    $block = array();
    switch ($delta) {
      case 0:
        //return feedburner_block_feedflare();
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL) {
          $node = node_load(arg(1));
          if ($feedflare = _feedburner_get_feedflare_script($node)) {
            $block['subject'] = t('FeedFlare');
            $block['content'] = $feedflare;
          }
        }
        return $block;
      case 1:
        // return feedburner_block_email();
        $id = feedburner_var('block_email_id');
        if ($id) {
          // TODO: Convert to Form API? or better containing divs?
          $block['subject'] = t('Get E-mail Updates');
          $block['content'] = '<form action="http://www.feedburner.com/fb/a/emailverify" method="post" target="popupwindow" onsubmit="window.open(\'http://www.feedburner.com\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true;" id="feedburner-block-email-form"><div class="container-inline" id="feedburner-block-email">';
          $block['content'] .= '<div class="form-item">';
          $block['content'] .= '<label for="feedburner-block-email-form-email">Enter your email address:</label>';
          $block['content'] .= '<input type="text" size="15" name="email" id="feedburner-block-email-form-email" />';
          $block['content'] .= '</div>';
          $block['content'] .= '<input type="hidden" value="http://feeds.feedburner.com/~e?ffid='. $id .'" name="url"/>';
          $block['content'] .= '<input type="submit" value="Subscribe" class="form-submit" />';
          $block['content'] .= '<p>Delivered by <a href="http://www.feedburner.com">FeedBurner</a></p>';
          $block['content'] .= '</div></form>';
        }
        return $block;
      case 2:
        // return feedburner_block_feedcount();
        $feed = feedburner_var('block_feedcount_feed');
        if (!empty($feed)) {
          $block['content'] = '<a href="'. _feedburner_construct_url($feed) .'"><img src="http://feeds.feedburner.com/~fc/'. $feed .'?bg=99CCFF&amp;fg=444444&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a>';
        }
        return $block;
      case 3:
        // return feedburner_block_feeds();
        module_load_include('inc', 'feedburner', 'feedburner.admin');
        $block['subject'] = t('@sitename feeds', array('@sitename' => variable_get('site_name', 'Drupal')));
        $feeds = db_query("SELECT path, feedburner FROM {feedburner}");
        //$block['content'] .= '<ul style="list-style-image: url(\'../../misc/feed.png\') !important;">';
        $block['content'] = '<ul>';
        while ($feed = db_fetch_object($feeds)) {
          $features = _feedburner_get_feed_features($feed->feedburner);
          $block['content'] .= '<li>'. theme('image', 'misc/feed.png') .' <a href="'. _feedburner_construct_url($feed->feedburner) .'">'. ($features->title ? $features->title : $feed->path) .'</a></li>';
        }
        $block['content'] .= '</ul>';
        return $block;
    }
  }
}

/**
 * Check to see if the current path has a FeedBurner feed redirect, and perform
 * the redirection as necessary.
 *
 * @param $path
 *   The current requested path.
 */
function _feedburner_check_redirect($path) {
  // Do not waste time and database hits on certain paths (admin paths, frontpage, node page)
  if (drupal_is_front_page() || preg_match('/^admin\/?|^node\/\d+\/?$/i', $path)) {
    return;
  }

  $skip_redirect = (isset($_GET['redirect']) && $_GET['redirect'] == 'no');
  $skip_useragents = preg_match(feedburner_var('useragents'), $_SERVER['HTTP_USER_AGENT']);
  $feed = db_result(db_query("SELECT feedburner FROM {feedburner} WHERE path = '%s'", $path));

  if (!$skip_redirect && !$skip_useragents && $feed) {
    $url = _feedburner_construct_url($feed);
    $status = feedburner_var('redirect_status');

    // Need to make a condensed copy of drupal_goto since common.inc is not yet
    // loaded (it will be if we hit DRUPAL_BOOTSTRAP_FULL). We can skip lots of
    // unneeded includes and processing since we are now going to redirect the
    // user and not continue any more Drupal loading.
    //module_invoke_all('exit', $url);
    //session_write_close();
    header('Location: '. $url, TRUE, (int) $status);
    exit();
  }
}

/**
 * Saves or deletes a FeedBurner feed to the {feedburner} table.
 *
 * @param $feed
 *   A string of the local site path.
 * @param $feed
 *   A string of the FeedBurner feed, or an empty value to remove it.
 *
 * @todo Run verification on FeedBurner feed.
 */
function _feedburner_save_feed($path, $feedburner = NULL) {
  $current = db_result(db_query("SELECT feedburner FROM {feedburner} WHERE path = '%s'", $path));

  // @todo Check if '0' is a valid FeedBurner feed?
  if (empty($feedburner)) {
    db_query("DELETE FROM {feedburner} WHERE path = '%s'", $path);
    if ($current == feedburner_var('feedflare_feed')) {
      variable_set('feedburner_feedflare_feed', 0);
    }
  }
  elseif ($current != $feedburner) {
    $values = array('path' => $path, 'feedburner' => $feedburner);
    drupal_write_record('feedburner', $values, ($current ? 'path' : array()));

    // @todo AddFeed / ModifyFeed Management API Calls
    // if (_feedburner_can_api(TRUE)) {
    // }
  }
}

/**
 * Constructs an absolute url based on a FeedBurner feed URI.
 *
 * @param $uri
 *   The FeedBurner feed URI.
 * @return
 *   The full URL of the FeedBurner feed.
 */
function _feedburner_construct_url($uri = '') {
  return 'http://'. feedburner_var('domain') .'/'. $uri;
}

/**
 * Determines if we can use the FeedBurner API.
 */
function _feedburner_can_api($valid_account = FALSE) {
  return !variable_get('drupal_http_request_fails', FALSE) && extension_loaded('SimpleXML') && function_exists('simplexml_load_string') && (!$valid_account || feedburner_var('auth'));
}

/*
 * Extract part of the current Drupal path from a certain 'argument' onward.
 *
 * For example, if the path is 'http://example-drupal/blah/foo/foobar/ferzle':
 *   $pos = 0, returns 'blah/foo/foobar/ferzle'
 *   $pos = 2, returns 'foobar/ferzle'
 *   $pos = 4, returns ''
 *
 * @param $pos
 *   The argument of the path to start at, use 0 to get the whole path
 * @return
 *   The extracted part of the path
 */
function _feedburner_get_path($pos = 0) {
  $path = str_replace(' ', '+', $_GET['q']);
  if ($pos > 0) {
    $path = explode('/', $path, $pos);
    $path = (count($path) >= $pos ? end($path) : '');
  }
  return trim($path);
}

/**
 * Returns a list of feed categories.
 */
function _feedburner_get_feed_categories() {
  return array(
    'site' => array('default' => TRUE),
    'blogs' => array('module' => 'blog'),
    'taxonomy' => array('module' => 'taxonomy'),
    //'views' => array('module' => 'views'),
  );
}

/**
 * Gets the script for feedflare based on node id and node type.
 *
 * @param $nid
 *   The node id.
 * @param $node_types
 *   The node's type (story, blog, etc.).
 * @return
 *   A JavaScript code for FeedFlare.
 */
function _feedburner_get_feedflare_script($node) {
  $feedflare_feed = feedburner_var('feedflare_feed');
  $feedflare_node_types = feedburner_var('feedflare_node_types');
  if ($feedflare_feed && in_array($node->type, $feedflare_node_types)) {
    return '<script src="http://feeds.feedburner.com/~s/'. $feedflare_feed .'?i='. url('node/'. $node->nid, array('absolute' => TRUE)) .'" type="text/javascript" charset="utf-8"></script>';
  }
  return FALSE;
}

/**
 * Internal default variables for admin_links_var().
 */
function feedburner_variables() {
  return array(
    'feedburner_redirect_status' => 307,
    'feedburner_feedflare_feed' => 0,
    'feedburner_feedflare_node_types' => array(),
    'feedburner_feedflare_display' => array('page'),
    'feedburner_auth' => FALSE,
    'feedburner_domain' => 'feedproxy.google.com',
    'feedburner_useragents' => '/feedburner|feedvalidator/i',
    'feedburner_block_feedcount_feed' => 0,
    'feedburner_block_email_id' => 0,
    'feedburner_block_email_display' => 0,
    'feedburner_replace_html' => 0,
    // Removed variables set to NULL.
    'feedburner_feeds' => NULL,
    'feedburner_blog' => NULL,
    'feedburner_standardstats' => NULL,
  );
}

/**
 * Internal implementation of variable_get().
 */
function feedburner_var($name) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = feedburner_variables();
  }

  $name = 'feedburner_'. $name;

  if (!isset($defaults[$name])) {
    watchdog('feedburner', 'Default variable for %variable not found.', array('%variable' => $name));
  }

  return variable_get($name, isset($defaults[$name]) ? $defaults[$name] : NULL);
}
